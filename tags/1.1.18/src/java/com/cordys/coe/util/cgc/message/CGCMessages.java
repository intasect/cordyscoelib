package com.cordys.coe.util.cgc.message;

import com.cordys.coe.util.i18n.CoEMessage;
import com.cordys.coe.util.i18n.CoEMessageSet;

/**
 * This code is generated by running com.cordys.coe.util.i18n.CoEMessageClassGenerator.
 */
public class CGCMessages
{
	/**
	 * Holds the definition of the CoE message set.
	 */
	public static final CoEMessageSet MESSAGE_SET = new CoEMessageSet("com.cordys.coe.util.cgc.message", "CGCMessages");

	/**
	 * Holds the definition of the message with ID cgc.error.nom.xml.
	 * Message text:
	 * Error find the proper tag: {0} Request: {1} Response: {2}.
	 */
	public static final CoEMessage CGC_ERROR_NOM_XML = new CoEMessage(MESSAGE_SET, "cgc.error.nom.xml");
	/**
	 * Holds the definition of the message with ID cgc.error.userinfo.xpath.
	 * Message text:
	 * Could not find the tag {0}. 
	 */
	public static final CoEMessage CGC_ERROR_USERINFO_XPATH = new CoEMessage(MESSAGE_SET, "cgc.error.userinfo.xpath");
	/**
	 * Holds the definition of the message with ID cgc.error.determine.url.
	 * Message text:
	 * Could not determine the proper URL to call.
	 */
	public static final CoEMessage CGC_ERROR_DETERMINE_URL = new CoEMessage(MESSAGE_SET, "cgc.error.determine.url");
	/**
	 * Holds the definition of the message with ID cgc.error.ssl.certificate.convert.
	 * Message text:
	 * Error converting the File to an URL (Authentication certificate).
	 */
	public static final CoEMessage CGC_ERROR_SSL_CERTIFICATE_CONVERT = new CoEMessage(MESSAGE_SET, "cgc.error.ssl.certificate.convert");
	/**
	 * Holds the definition of the message with ID cgc.error.userinfo.missing.
	 * Message text:
	 * Missing user information.
	 */
	public static final CoEMessage CGC_ERROR_USERINFO_MISSING = new CoEMessage(MESSAGE_SET, "cgc.error.userinfo.missing");
	/**
	 * Holds the definition of the message with ID cgc.error.missing.host.
	 * Message text:
	 * Missing host name.
	 */
	public static final CoEMessage CGC_ERROR_MISSING_HOST = new CoEMessage(MESSAGE_SET, "cgc.error.missing.host");
	/**
	 * Holds the definition of the message with ID cgc.error.userinfo.xml.
	 * Message text:
	 * Error doing XML operations.
	 */
	public static final CoEMessage CGC_ERROR_USERINFO_XML = new CoEMessage(MESSAGE_SET, "cgc.error.userinfo.xml");
	/**
	 * Holds the definition of the message with ID cgc.error.request.failed.
	 * Message text:
	 * Error sending the request to Cordys. Request: {0} Timeout: {1}.
	 */
	public static final CoEMessage CGC_ERROR_REQUEST_FAILED = new CoEMessage(MESSAGE_SET, "cgc.error.request.failed");
	/**
	 * Holds the definition of the message with ID cgc.error.ssl.truststore.convert.
	 * Message text:
	 * Error converting the File to an URL (Trust store).
	 */
	public static final CoEMessage CGC_ERROR_SSL_TRUSTSTORE_CONVERT = new CoEMessage(MESSAGE_SET, "cgc.error.ssl.truststore.convert");
	/**
	 * Holds the definition of the message with ID cgc.error.sso.assertion.
	 * Message text:
	 * Could not find the SAML assertion in the response.
	 */
	public static final CoEMessage CGC_ERROR_SSO_ASSERTION = new CoEMessage(MESSAGE_SET, "cgc.error.sso.assertion");
	/**
	 * Holds the definition of the message with ID cgc.error.sso.status.
	 * Message text:
	 * The authentication returned the wrong status: {0}
	 */
	public static final CoEMessage CGC_ERROR_SSO_STATUS = new CoEMessage(MESSAGE_SET, "cgc.error.sso.status");
	/**
	 * Holds the definition of the message with ID cgc.error.ldap.getldapobject.
	 * Message text:
	 * Error reading LDAP for DN {0} 
	 */
	public static final CoEMessage CGC_ERROR_LDAP_GETLDAPOBJECT = new CoEMessage(MESSAGE_SET, "cgc.error.ldap.getldapobject");
	/**
	 * Holds the definition of the message with ID cgc.error.empty.body.
	 * Message text:
	 * The response body is empty.
	 */
	public static final CoEMessage CGC_ERROR_EMPTY_BODY = new CoEMessage(MESSAGE_SET, "cgc.error.empty.body");
	/**
	 * Holds the definition of the message with ID cgc.error.ssl.truststore.not.exists.
	 * Message text:
	 * Trust store file does not exist({0}).
	 */
	public static final CoEMessage CGC_ERROR_SSL_TRUSTSTORE_NOT_EXISTS = new CoEMessage(MESSAGE_SET, "cgc.error.ssl.truststore.not.exists");
	/**
	 * Holds the definition of the message with ID cgc.connect.
	 * Message text:
	 * Error connecting to the cordys server ({0}:{1}).
	 */
	public static final CoEMessage CGC_CONNECT = new CoEMessage(MESSAGE_SET, "cgc.connect");
	/**
	 * Holds the definition of the message with ID cgc.error.no.body.found.
	 * Message text:
	 * Could not find the SOAP:Body in the created XML.
	 */
	public static final CoEMessage CGC_ERROR_NO_BODY_FOUND = new CoEMessage(MESSAGE_SET, "cgc.error.no.body.found");
	/**
	 * Holds the definition of the message with ID cgc.error.ca.empty.sessionid.
	 * Message text:
	 * Found an empty wcp-session id tag.
	 */
	public static final CoEMessage CGC_ERROR_CA_EMPTY_SESSIONID = new CoEMessage(MESSAGE_SET, "cgc.error.ca.empty.sessionid");
	/**
	 * Holds the definition of the message with ID cgc.error.ldap.update.
	 * Message text:
	 * Error updating LDAP for DN {0}
	 */
	public static final CoEMessage CGC_ERROR_LDAP_UPDATE = new CoEMessage(MESSAGE_SET, "cgc.error.ldap.update");
	/**
	 * Holds the definition of the message with ID cgc.error.search.for.fault.
	 * Message text:
	 * Error searching the response for a Fault.
	 */
	public static final CoEMessage CGC_ERROR_SEARCH_FOR_FAULT = new CoEMessage(MESSAGE_SET, "cgc.error.search.for.fault");
	/**
	 * Holds the definition of the message with ID cgc.error.parse.response.
	 * Message text:
	 * Error parsing the response XML: {0}
	 */
	public static final CoEMessage CGC_ERROR_PARSE_RESPONSE = new CoEMessage(MESSAGE_SET, "cgc.error.parse.response");
	/**
	 * Holds the definition of the message with ID cgc.error.login.failed.
	 * Message text:
	 * Sending the GetUserDetails failed.
	 */
	public static final CoEMessage CGC_ERROR_LOGIN_FAILED = new CoEMessage(MESSAGE_SET, "cgc.error.login.failed");
	/**
	 * Holds the definition of the message with ID cgc.error.sso.signature.
	 * Message text:
	 * Could not find the XML signature in the response.
	 */
	public static final CoEMessage CGC_ERROR_SSO_SIGNATURE = new CoEMessage(MESSAGE_SET, "cgc.error.sso.signature");
	/**
	 * Holds the definition of the message with ID cgc.error.ldap.search.
	 * Message text:
	 * Error searching LDAP with filter {0}
	 */
	public static final CoEMessage CGC_ERROR_LDAP_SEARCH = new CoEMessage(MESSAGE_SET, "cgc.error.ldap.search");
	/**
	 * Holds the definition of the message with ID cgc.error.not.connected.
	 * Message text:
	 * The Cordys Gateway Client is not connected.
	 */
	public static final CoEMessage CGC_ERROR_NOT_CONNECTED = new CoEMessage(MESSAGE_SET, "cgc.error.not.connected");
	/**
	 * Holds the definition of the message with ID cgc.error.sending.request.
	 * Message text:
	 * Error sending the webservice request.
	 */
	public static final CoEMessage CGC_ERROR_SENDING_REQUEST = new CoEMessage(MESSAGE_SET, "cgc.error.sending.request");
	/**
	 * Holds the definition of the message with ID cgc.error.ssl.certificate.missing.
	 * Message text:
	 * Missing the location of the authentication certificate.
	 */
	public static final CoEMessage CGC_ERROR_SSL_CERTIFICATE_MISSING = new CoEMessage(MESSAGE_SET, "cgc.error.ssl.certificate.missing");
	/**
	 * Holds the definition of the message with ID cgc.error.http.error.
	 * Message text:
	 * HTTP Error calling the web service. 
	 */
	public static final CoEMessage CGC_ERROR_HTTP_ERROR = new CoEMessage(MESSAGE_SET, "cgc.error.http.error");
	/**
	 * Holds the definition of the message with ID cgc.error.must.be.ssl.
	 * Message text:
	 * When using client certificate login the server must be set to SSL.
	 */
	public static final CoEMessage CGC_ERROR_MUST_BE_SSL = new CoEMessage(MESSAGE_SET, "cgc.error.must.be.ssl");
	/**
	 * Holds the definition of the message with ID cgc.error.ssl.truststore.missing.
	 * Message text:
	 * Missing the location of the trust store.
	 */
	public static final CoEMessage CGC_ERROR_SSL_TRUSTSTORE_MISSING = new CoEMessage(MESSAGE_SET, "cgc.error.ssl.truststore.missing");
	/**
	 * Holds the definition of the message with ID cgc.error.create.message.
	 * Message text:
	 * Error creating the request for method {0}:{1}.
	 */
	public static final CoEMessage CGC_ERROR_CREATE_MESSAGE = new CoEMessage(MESSAGE_SET, "cgc.error.create.message");
	/**
	 * Holds the definition of the message with ID cgc.error.ca.no.sessionid.
	 * Message text:
	 * Could not find the wcp-session id tag.
	 */
	public static final CoEMessage CGC_ERROR_CA_NO_SESSIONID = new CoEMessage(MESSAGE_SET, "cgc.error.ca.no.sessionid");
	/**
	 * Holds the definition of the message with ID cgc.error.add.message.
	 * Message text:
	 * Error adding the method {0}:{1} to the request.
	 */
	public static final CoEMessage CGC_ERROR_ADD_MESSAGE = new CoEMessage(MESSAGE_SET, "cgc.error.add.message");
	/**
	 * Holds the definition of the message with ID cgc.error.ssl.certificate.not.exists.
	 * Message text:
	 * Authentication certificate file does not exist({0}).
	 */
	public static final CoEMessage CGC_ERROR_SSL_CERTIFICATE_NOT_EXISTS = new CoEMessage(MESSAGE_SET, "cgc.error.ssl.certificate.not.exists");

}