/**
 * © 2003 Cordys R&D B.V. All rights reserved.     The computer program(s) is
 * the proprietary information of Cordys R&D B.V.     and provided under the
 * relevant License Agreement containing restrictions     on use and
 * disclosure. Use is subject to the License Agreement.
 */
package com.cordys.coe.util.system.processes;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.util.Vector;

import javax.swing.*;

import javax.swing.table.DefaultTableModel;

/**
 * This form can be used as the Windows Task manager. You can kill processes from here.
 *
 * @author  pgussow
 */
public class TaskManager extends JFrame
{
    /**
     * Holds the systemprocesslist.
     */
    SystemProcessList splProcesses;
    /**
     * DOCUMENTME.
     */
    private javax.swing.JLabel jLabel1;
    /**
     * DOCUMENTME.
     */
    private javax.swing.JMenuItem jMenuItem1;
    /**
     * DOCUMENTME.
     */
    private javax.swing.JScrollPane jScrollPane1;
    /**
     * DOCUMENTME.
     */
    private javax.swing.JMenuItem miKill;
    /**
     * DOCUMENTME.
     */
    private javax.swing.JPopupMenu pmKilling;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * DOCUMENTME.
     */
    private javax.swing.JTable tblProcesses;

    /**
     * Creates new form TaskManager.
     */
    public TaskManager()
    {
        initComponents();

        setSize(800, 600);

        splProcesses = new SystemProcessList();

        tblProcesses.addMouseListener(new PopupListener());

        showProcessList();
    }

    // TaskManager
    /**
     * DOCUMENT ME!
     *
     * @param  args  the command line arguments
     */
    public static void main(String[] args)
    {
        new TaskManager().setVisible(true);
    }

    /**
     * Exit the Application.
     */
    private void exitForm()
    {
        System.exit(0);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    private void initComponents() //GEN-BEGIN:initComponents
    {
        pmKilling = new javax.swing.JPopupMenu();
        miKill = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProcesses = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        miKill.setFont(new java.awt.Font("Tahoma", 0, 10));
        miKill.setText("Kill process");
        miKill.setActionCommand("KILL");
        miKill.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    miKillClick();
                }
            });

        pmKilling.add(miKill);
        jMenuItem1.setFont(new java.awt.Font("Tahoma", 0, 10));
        jMenuItem1.setText("Refresh");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    jMenuItem1ActionPerformed();
                }
            });

        pmKilling.add(jMenuItem1);

        addWindowListener(new java.awt.event.WindowAdapter()
            {
                public void windowClosing(java.awt.event.WindowEvent evt)
                {
                    exitForm();
                }
            });

        jScrollPane1.setBorder(new javax.swing.border.EtchedBorder());
        tblProcesses.setFont(new java.awt.Font("Tahoma", 0, 10));
        tblProcesses.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {},
                                                                      new String[]
                                                                      {
                                                                          "Executable", "PID",
                                                                          "ModuleID", "Threads",
                                                                          "Priority", "ParentPID"
                                                                      })
            {
                boolean[] canEdit = new boolean[] { false, false, false, false, false, false };

                @Override public boolean isCellEditable(int rowIndex, int columnIndex)
                {
                    return canEdit[columnIndex];
                }
            });
        jScrollPane1.setViewportView(tblProcesses);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("All system processes");
        getContentPane().add(jLabel1, java.awt.BorderLayout.NORTH);

        pack();
    }

    //GEN-END:initComponents
    /**
     * DOCUMENTME.
     */
    private void jMenuItem1ActionPerformed()
    {
        showProcessList();
    }

    //GEN-LAST:event_jMenuItem1ActionPerformed
    /**
     * DOCUMENTME.
     */
    private void miKillClick() //GEN-FIRST:event_miKillClick
    {
        int[] aiSelected = tblProcesses.getSelectedRows();

        for (int iCount = 0; iCount < aiSelected.length; iCount++)
        {
            SPEntry spEntry = (SPEntry) tblProcesses.getValueAt(aiSelected[iCount], 0);
            splProcesses.killProcess(spEntry.spProcess);
        }
        showProcessList();
    }

    /**
     * This method displays a dialog window with the passed on message.
     *
     * @param  sMSG  The message to display.
     */
    private void showMsg(String sMSG)
    {
        JOptionPane.showMessageDialog(this, sMSG);
    }

    // showMsg
    /**
     * This method refreshes the list with systemprocesses and adds them to the table.
     */
    private void showProcessList()
    {
        DefaultTableModel dtmModel = (DefaultTableModel) tblProcesses.getModel();

        // Clear table
        while (dtmModel.getRowCount() > 0)
        {
            dtmModel.removeRow(0);
        }

        try
        {
            Vector<?> vProcesses = splProcesses.getSystemProcessesList();

            for (int iCount = 0; iCount < vProcesses.size(); iCount++)
            {
                SystemProcess spProcess = (SystemProcess) vProcesses.get(iCount);
                SPEntry entry = new SPEntry(spProcess);
                Vector<Object> vData = new Vector<Object>();
                vData.add(entry);
                vData.add(spProcess.getProcessID());
                vData.add(spProcess.getModuleID());
                vData.add(new Integer(spProcess.getCntThreads()));
                vData.add(new Integer(spProcess.getPriority()));
                vData.add(spProcess.getParentPID());
                dtmModel.addRow(vData);
            }
        }
        catch (Exception e)
        {
            showMsg("Error:\n" + e);
        }
    }

    // showProcessList

    /**
     * DOCUMENTME.
     */
    public class PopupListener extends MouseAdapter
    {
        /**
         * DOCUMENTME.
         *
         * @param  e  DOCUMENTME
         */
        @Override public void mousePressed(MouseEvent e)
        {
            maybeShowPopup(e);
        }

        /**
         * DOCUMENTME.
         *
         * @param  e  DOCUMENTME
         */
        @Override public void mouseReleased(MouseEvent e)
        {
            maybeShowPopup(e);
        }

        /**
         * DOCUMENTME.
         *
         * @param  e  DOCUMENTME
         */
        private void maybeShowPopup(MouseEvent e)
        {
            if (e.isPopupTrigger())
            {
                pmKilling.show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }

    // PopupListener
    // End of variables declaration//GEN-END:variables
    /**
     * Innerclass around the SystemProcess-class so it can be easily displayed in the JTable.
     */
    private class SPEntry
    {
        /**
         * Holds the SystemProcess for this entry.
         */
        public SystemProcess spProcess;

        /**
         * Constructor. Creates a new entry-object
         *
         * @param  spProcess  The SystemProces to use for this entry.
         */
        public SPEntry(SystemProcess spProcess)
        {
            this.spProcess = spProcess;
        }

        // SPEntry
        /**
         * This method returns the String-representation of the entry.
         *
         * @return  The String-representation of the entry.
         */
        @Override public String toString()
        {
            return spProcess.getExeName();
        }
        // toString
    }

    // SPEntry
}

// TaskManager
